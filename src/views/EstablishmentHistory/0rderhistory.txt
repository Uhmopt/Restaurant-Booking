import React from 'react';
import { makeStyles } from '@material-ui/core/styles';
import Paper from '@material-ui/core/Paper';
import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableContainer from '@material-ui/core/TableContainer';
import TableHead from '@material-ui/core/TableHead';
import TablePagination from '@material-ui/core/TablePagination';
import TableRow from '@material-ui/core/TableRow';
import axios from "axios";

const columns = [
	{ id: 'orderId', label: 'OrderId' },
	{ id: 'state', label: 'State' },
	{ id: 'updates', label: 'Updates' },
	{ id: 'time', label: 'Time' },
	{ id: 'customerId', label: 'Customer' },
	{ id: 'establishmentId', label: 'Establishment' },
	{ id: 'items', label: 'Items' },
	{ id: 'orderAddress', label: 'Address', minWidth: 230 },
	{ id: 'comments', label: 'Comments' },
	{ id: 'total', label: 'Total(Â£)' },
	{ id: 'lastModifiedDate', label: 'Date' },
	{ id: 'modifiedBy', label: 'Modifier' },
];

//Change seconds to time
function secondsToHms(d) {

	var sec_num = Number(d) // don't forget the second param
	var hours   = Math.floor(sec_num / 3600);
	var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
	var seconds = sec_num - (hours * 3600) - (minutes * 60);

	if (hours   < 10) {hours   = "0"+hours;}
	if (minutes < 10) {minutes = "0"+minutes;}
	if (seconds < 10) {seconds = "0"+seconds;}
	return hours + ':' + minutes;
}

const useStyles = makeStyles({
	root: {
		width: '100%',
	},
	container: {
		maxHeight: 650,
	},
});

export default function StickyHeadTable(props) {

	const [rows, setRows] = React.useState([]);
	const classes = useStyles();
	const [page, setPage] = React.useState(0);
	const [rowsPerPage, setRowsPerPage] = React.useState(10);

	React.useEffect(() => {
		initGetData();
	}, []);

	React.useEffect(() => {
		setTableData();
	}, [props]);

	function initGetData () {

		localStorage.getItem("establishmentId")
		var config = {
			method: 'get',
			url: `https://cors-anywhere.herokuapp.com/https://ontab.co.uk/v1/history/order/establishment/${localStorage.getItem("establishmentId")}?username=${props.data.customer}&start=${props.data.startDate}&end=${props.data.endDate}`,
			headers: {}
		};
		axios(config)
		.then(function (response) {
			localStorage.setItem("orderHistory", JSON.stringify(response.data))
			setTableData()
		})
		.catch(function (error) {
			console.log(error);
		});
	}

	function setTableData () {
		var data = JSON.parse(localStorage.getItem("orderHistory"));
		let fk_row = [];
		if (data!=null) {
			data.orders.forEach((element, i) => {
				fk_row.push( createData(JSON.stringify(element.id), element.state, element.updates.toString(), secondsToHms(element.time), element.customerID, element.establishmentID,
				(Object.entries(element.items)).toString(), element.orderAddress, element.comments, element.total, (element.lastModifiedDate).substr(0, 10), element.lastModifiedBy))
			});
		}
		// if (fk_row.length!=0) {
		// 	fk_row = searchData(fk_row)
		// }
		console.log(fk_row)
		setRows(fk_row);
	}

	function createData(orderId, state, updates, time, customerId, establishmentId, items, orderAddress, comments, total, lastModifiedDate, modifiedBy) {
		customerId = "HarryPotter";
		establishmentId = "John's Pub";
		orderAddress = objectToString(orderAddress, 1)
		return {orderId, state, updates, time, customerId, establishmentId, items, orderAddress, comments, total, lastModifiedDate, modifiedBy};
	}

	const handleChangePage = (event, newPage) => {
		setPage(newPage);
	};

	const handleChangeRowsPerPage = (event) => {
		setRowsPerPage(+event.target.value);
		setPage(0);
	};

	// function searchData (data) {
	// 	data= data.filter(function(item) {
	// 		if (Date.parse( props.data.startDate) < Date.parse(item.lastModifiedDate) && Date.parse(item.lastModifiedDate) < Date.parse(props.data.endDate) ) {
	// 			return true;
	// 		} else {
	// 			return false;
	// 		}
	// 	});
	// 	// return (data);
	// 	data.forEach((element, i)=>{
	// 		data[i].orderId = i+1
	// 	})
	// 	return (data);
	// }


	function objectToString (obj, v) {
		var string = "";
		if (v == 0) {
			for (const key in obj) {
				string = string + key + ":" + " " + obj[key] + ", ";
			}
		} else {
			for (const key in obj) {
				string = string + obj[key] + ", ";
			}
		}
		string = string.substr(0, string.length - 2);
		return string
	}

	return (
		<div>                                                                                                               
			<Paper className={classes.root}>
			<TableContainer className={classes.container}>
				<Table stickyHeader aria-label="sticky table">
					<TableHead>
						<TableRow>
							{columns.map((column) => (
								<TableCell
									key={column.id}
									align={column.align}
									style={{ minWidth: column.minWidth }}
								>
									{column.label}
								</TableCell>
							))}
						</TableRow>
					</TableHead>
					<TableBody>
						{rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map((row, i) => {
							return (
								<TableRow hover role="checkbox" tabIndex={-1} key={i}>
									{columns.map((column, i) => {
										const value = row[column.id];
										return (
											<TableCell key={i} align={column.align}>
												{column.format && typeof value === 'number' ? column.format(value) : value}
											</TableCell>
										);
									})}
								</TableRow>
							);
						})}
					</TableBody>
				</Table>
			</TableContainer>
			<TablePagination
				rowsPerPageOptions={[10, 25, 100]}
				component="div"
				count={rows.length}
				rowsPerPage={rowsPerPage}
				page={page}
				onChangePage={handleChangePage}
				onChangeRowsPerPage={handleChangeRowsPerPage}
			/>
		</Paper>
		</div>
 );
}
